/*
 * Shipments API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class GatewayErrorContext : IEquatable<GatewayErrorContext>
    { 
        /// <summary>
        /// Gets or Sets StatusMessage
        /// </summary>
        [DataMember(Name="statusMessage")]
        public GatewayErrorContextStatusMessage StatusMessage { get; set; }

        /// <summary>
        /// Gets or Sets MessageName
        /// </summary>
        [DataMember(Name="messageName")]
        public string MessageName { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp")]
        public string Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets SendingApplication
        /// </summary>
        [DataMember(Name="sendingApplication")]
        public string SendingApplication { get; set; }

        /// <summary>
        /// Gets or Sets TrackingId
        /// </summary>
        [DataMember(Name="trackingId")]
        public string TrackingId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GatewayErrorContext {\n");
            sb.Append("  StatusMessage: ").Append(StatusMessage).Append("\n");
            sb.Append("  MessageName: ").Append(MessageName).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  SendingApplication: ").Append(SendingApplication).Append("\n");
            sb.Append("  TrackingId: ").Append(TrackingId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((GatewayErrorContext)obj);
        }

        /// <summary>
        /// Returns true if GatewayErrorContext instances are equal
        /// </summary>
        /// <param name="other">Instance of GatewayErrorContext to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GatewayErrorContext other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    StatusMessage == other.StatusMessage ||
                    StatusMessage != null &&
                    StatusMessage.Equals(other.StatusMessage)
                ) && 
                (
                    MessageName == other.MessageName ||
                    MessageName != null &&
                    MessageName.Equals(other.MessageName)
                ) && 
                (
                    Timestamp == other.Timestamp ||
                    Timestamp != null &&
                    Timestamp.Equals(other.Timestamp)
                ) && 
                (
                    SendingApplication == other.SendingApplication ||
                    SendingApplication != null &&
                    SendingApplication.Equals(other.SendingApplication)
                ) && 
                (
                    TrackingId == other.TrackingId ||
                    TrackingId != null &&
                    TrackingId.Equals(other.TrackingId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (StatusMessage != null)
                    hashCode = hashCode * 59 + StatusMessage.GetHashCode();
                    if (MessageName != null)
                    hashCode = hashCode * 59 + MessageName.GetHashCode();
                    if (Timestamp != null)
                    hashCode = hashCode * 59 + Timestamp.GetHashCode();
                    if (SendingApplication != null)
                    hashCode = hashCode * 59 + SendingApplication.GetHashCode();
                    if (TrackingId != null)
                    hashCode = hashCode * 59 + TrackingId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(GatewayErrorContext left, GatewayErrorContext right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(GatewayErrorContext left, GatewayErrorContext right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
