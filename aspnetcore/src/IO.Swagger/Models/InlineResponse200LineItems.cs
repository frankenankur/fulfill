/*
 * Costco Fulfillment API
 *
 * An API for fullfilling orders placed on non-Costco channels by Costco 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class InlineResponse200LineItems : IEquatable<InlineResponse200LineItems>
    { 
        /// <summary>
        /// The unique id of the  order line for which shipping was requested
        /// </summary>
        /// <value>The unique id of the  order line for which shipping was requested</value>
        [Required]
        [DataMember(Name="referenceNumber")]
        public string ReferenceNumber { get; set; }

        /// <summary>
        /// The Cost of delivery for the line, represented as a number
        /// </summary>
        /// <value>The Cost of delivery for the line, represented as a number</value>
        [Required]
        [DataMember(Name="deliveryCost")]
        public decimal? DeliveryCost { get; set; }

        /// <summary>
        /// Associated delivery linked fees that must be added to the line item collection of an order if returned.
        /// </summary>
        /// <value>Associated delivery linked fees that must be added to the line item collection of an order if returned.</value>
        [DataMember(Name="linkedDeliveryFees")]
        public List<LinkedFee> LinkedDeliveryFees { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse200LineItems {\n");
            sb.Append("  ReferenceNumber: ").Append(ReferenceNumber).Append("\n");
            sb.Append("  DeliveryCost: ").Append(DeliveryCost).Append("\n");
            sb.Append("  LinkedDeliveryFees: ").Append(LinkedDeliveryFees).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((InlineResponse200LineItems)obj);
        }

        /// <summary>
        /// Returns true if InlineResponse200LineItems instances are equal
        /// </summary>
        /// <param name="other">Instance of InlineResponse200LineItems to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse200LineItems other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ReferenceNumber == other.ReferenceNumber ||
                    ReferenceNumber != null &&
                    ReferenceNumber.Equals(other.ReferenceNumber)
                ) && 
                (
                    DeliveryCost == other.DeliveryCost ||
                    DeliveryCost != null &&
                    DeliveryCost.Equals(other.DeliveryCost)
                ) && 
                (
                    LinkedDeliveryFees == other.LinkedDeliveryFees ||
                    LinkedDeliveryFees != null &&
                    LinkedDeliveryFees.SequenceEqual(other.LinkedDeliveryFees)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ReferenceNumber != null)
                    hashCode = hashCode * 59 + ReferenceNumber.GetHashCode();
                    if (DeliveryCost != null)
                    hashCode = hashCode * 59 + DeliveryCost.GetHashCode();
                    if (LinkedDeliveryFees != null)
                    hashCode = hashCode * 59 + LinkedDeliveryFees.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(InlineResponse200LineItems left, InlineResponse200LineItems right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(InlineResponse200LineItems left, InlineResponse200LineItems right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
