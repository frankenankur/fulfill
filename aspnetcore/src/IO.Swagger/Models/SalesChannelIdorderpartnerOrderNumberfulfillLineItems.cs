/*
 * Costco Fulfillment API
 *
 * An API for fullfilling orders placed on non-Costco channels by Costco 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class SalesChannelIdorderpartnerOrderNumberfulfillLineItems : IEquatable<SalesChannelIdorderpartnerOrderNumberfulfillLineItems>
    { 
        /// <summary>
        /// The unique id of the line item from the original order
        /// </summary>
        /// <value>The unique id of the line item from the original order</value>
        [Required]
        [DataMember(Name="referenceNumber")]
        public decimal? ReferenceNumber { get; set; }

        /// <summary>
        /// The Costco item number that was fulfilled
        /// </summary>
        /// <value>The Costco item number that was fulfilled</value>
        [Required]
        [DataMember(Name="itemNumber")]
        public string ItemNumber { get; set; }

        /// <summary>
        /// scanned Product Barcodes for Picked items
        /// </summary>
        /// <value>scanned Product Barcodes for Picked items</value>
        [Required]
        [DataMember(Name="scannedBarCodes")]
        public List<string> ScannedBarCodes { get; set; }

        /// <summary>
        /// Gets or Sets DeliveryStatus
        /// </summary>
        [Required]
        [DataMember(Name="deliveryStatus")]
        public List<SalesChannelIdorderpartnerOrderNumberfulfillDeliveryStatus> DeliveryStatus { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SalesChannelIdorderpartnerOrderNumberfulfillLineItems {\n");
            sb.Append("  ReferenceNumber: ").Append(ReferenceNumber).Append("\n");
            sb.Append("  ItemNumber: ").Append(ItemNumber).Append("\n");
            sb.Append("  ScannedBarCodes: ").Append(ScannedBarCodes).Append("\n");
            sb.Append("  DeliveryStatus: ").Append(DeliveryStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SalesChannelIdorderpartnerOrderNumberfulfillLineItems)obj);
        }

        /// <summary>
        /// Returns true if SalesChannelIdorderpartnerOrderNumberfulfillLineItems instances are equal
        /// </summary>
        /// <param name="other">Instance of SalesChannelIdorderpartnerOrderNumberfulfillLineItems to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SalesChannelIdorderpartnerOrderNumberfulfillLineItems other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ReferenceNumber == other.ReferenceNumber ||
                    ReferenceNumber != null &&
                    ReferenceNumber.Equals(other.ReferenceNumber)
                ) && 
                (
                    ItemNumber == other.ItemNumber ||
                    ItemNumber != null &&
                    ItemNumber.Equals(other.ItemNumber)
                ) && 
                (
                    ScannedBarCodes == other.ScannedBarCodes ||
                    ScannedBarCodes != null &&
                    ScannedBarCodes.SequenceEqual(other.ScannedBarCodes)
                ) && 
                (
                    DeliveryStatus == other.DeliveryStatus ||
                    DeliveryStatus != null &&
                    DeliveryStatus.SequenceEqual(other.DeliveryStatus)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ReferenceNumber != null)
                    hashCode = hashCode * 59 + ReferenceNumber.GetHashCode();
                    if (ItemNumber != null)
                    hashCode = hashCode * 59 + ItemNumber.GetHashCode();
                    if (ScannedBarCodes != null)
                    hashCode = hashCode * 59 + ScannedBarCodes.GetHashCode();
                    if (DeliveryStatus != null)
                    hashCode = hashCode * 59 + DeliveryStatus.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SalesChannelIdorderpartnerOrderNumberfulfillLineItems left, SalesChannelIdorderpartnerOrderNumberfulfillLineItems right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SalesChannelIdorderpartnerOrderNumberfulfillLineItems left, SalesChannelIdorderpartnerOrderNumberfulfillLineItems right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
