/*
 * Costco Fulfillment API
 *
 * An API for fullfilling orders placed on non-Costco channels by Costco 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ReturnAuthorizationReturnDispositions : IEquatable<ReturnAuthorizationReturnDispositions>
    { 
        /// <summary>
        /// The method by which the return will be executed
        /// </summary>
        /// <value>The method by which the return will be executed</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum DispositionTypeEnum
        {
            
            /// <summary>
            /// Enum CallTagEnum for CallTag
            /// </summary>
            [EnumMember(Value = "CallTag")]
            CallTagEnum = 1,
            
            /// <summary>
            /// Enum DestroyEnum for Destroy
            /// </summary>
            [EnumMember(Value = "Destroy")]
            DestroyEnum = 2,
            
            /// <summary>
            /// Enum CustomerServiceEnum for CustomerService
            /// </summary>
            [EnumMember(Value = "CustomerService")]
            CustomerServiceEnum = 3,
            
            /// <summary>
            /// Enum NonReturnableEnum for NonReturnable
            /// </summary>
            [EnumMember(Value = "NonReturnable")]
            NonReturnableEnum = 4,
            
            /// <summary>
            /// Enum NotShippedEnum for NotShipped
            /// </summary>
            [EnumMember(Value = "NotShipped")]
            NotShippedEnum = 5,
            
            /// <summary>
            /// Enum ReturnedAlreadyEnum for ReturnedAlready
            /// </summary>
            [EnumMember(Value = "ReturnedAlready")]
            ReturnedAlreadyEnum = 6,
            
            /// <summary>
            /// Enum ReturnInProgressEnum for ReturnInProgress
            /// </summary>
            [EnumMember(Value = "ReturnInProgress")]
            ReturnInProgressEnum = 7,
            
            /// <summary>
            /// Enum UnexpectedEnum for unexpected
            /// </summary>
            [EnumMember(Value = "unexpected")]
            UnexpectedEnum = 8
        }

        /// <summary>
        /// The method by which the return will be executed
        /// </summary>
        /// <value>The method by which the return will be executed</value>
        [Required]
        [DataMember(Name="dispositionType")]
        public DispositionTypeEnum? DispositionType { get; set; }

        /// <summary>
        /// The tracking id of dispositions requiring a label
        /// </summary>
        /// <value>The tracking id of dispositions requiring a label</value>
        [DataMember(Name="trackingId")]
        public string TrackingId { get; set; }

        /// <summary>
        /// the issuer of the return label for dispositions requiring a label
        /// </summary>
        /// <value>the issuer of the return label for dispositions requiring a label</value>
        [Required]
        [DataMember(Name="carrier")]
        public string Carrier { get; set; }

        /// <summary>
        /// The Shipping Label for dispositions requiring a label
        /// </summary>
        /// <value>The Shipping Label for dispositions requiring a label</value>
        [DataMember(Name="shippingLabel")]
        public string ShippingLabel { get; set; }

        /// <summary>
        /// the lines of an order this disposition applies to
        /// </summary>
        /// <value>the lines of an order this disposition applies to</value>
        [Required]
        [DataMember(Name="orderLines")]
        public List<ReturnAuthorizationOrderLines> OrderLines { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReturnAuthorizationReturnDispositions {\n");
            sb.Append("  DispositionType: ").Append(DispositionType).Append("\n");
            sb.Append("  TrackingId: ").Append(TrackingId).Append("\n");
            sb.Append("  Carrier: ").Append(Carrier).Append("\n");
            sb.Append("  ShippingLabel: ").Append(ShippingLabel).Append("\n");
            sb.Append("  OrderLines: ").Append(OrderLines).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ReturnAuthorizationReturnDispositions)obj);
        }

        /// <summary>
        /// Returns true if ReturnAuthorizationReturnDispositions instances are equal
        /// </summary>
        /// <param name="other">Instance of ReturnAuthorizationReturnDispositions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReturnAuthorizationReturnDispositions other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    DispositionType == other.DispositionType ||
                    DispositionType != null &&
                    DispositionType.Equals(other.DispositionType)
                ) && 
                (
                    TrackingId == other.TrackingId ||
                    TrackingId != null &&
                    TrackingId.Equals(other.TrackingId)
                ) && 
                (
                    Carrier == other.Carrier ||
                    Carrier != null &&
                    Carrier.Equals(other.Carrier)
                ) && 
                (
                    ShippingLabel == other.ShippingLabel ||
                    ShippingLabel != null &&
                    ShippingLabel.Equals(other.ShippingLabel)
                ) && 
                (
                    OrderLines == other.OrderLines ||
                    OrderLines != null &&
                    OrderLines.SequenceEqual(other.OrderLines)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (DispositionType != null)
                    hashCode = hashCode * 59 + DispositionType.GetHashCode();
                    if (TrackingId != null)
                    hashCode = hashCode * 59 + TrackingId.GetHashCode();
                    if (Carrier != null)
                    hashCode = hashCode * 59 + Carrier.GetHashCode();
                    if (ShippingLabel != null)
                    hashCode = hashCode * 59 + ShippingLabel.GetHashCode();
                    if (OrderLines != null)
                    hashCode = hashCode * 59 + OrderLines.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ReturnAuthorizationReturnDispositions left, ReturnAuthorizationReturnDispositions right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ReturnAuthorizationReturnDispositions left, ReturnAuthorizationReturnDispositions right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
