/*
 * Shipments API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// LineItem for an order
    /// </summary>
    [DataContract]
    public partial class LineItem : IEquatable<LineItem>
    { 
        /// <summary>
        /// The Costco item number
        /// </summary>
        /// <value>The Costco item number</value>
        [Required]
        [DataMember(Name="itemNumber")]
        public string ItemNumber { get; set; }

        /// <summary>
        /// The quantity of units to be fulfilled
        /// </summary>
        /// <value>The quantity of units to be fulfilled</value>
        [Required]
        [DataMember(Name="quantity")]
        public int? Quantity { get; set; }

        /// <summary>
        /// The moment at which the order fulfillment status changed in ISO 8601 format.
        /// </summary>
        /// <value>The moment at which the order fulfillment status changed in ISO 8601 format.</value>
        [Required]
        [DataMember(Name="fulfilledOnTimeStamp")]
        public DateTime? FulfilledOnTimeStamp { get; set; }

        /// <summary>
        /// An explanation for the fulfillment status change
        /// </summary>
        /// <value>An explanation for the fulfillment status change</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum FulfillmentStatusEnum
        {
            
            /// <summary>
            /// Enum DeliveredEnum for delivered
            /// </summary>
            [EnumMember(Value = "delivered")]
            DeliveredEnum = 1,
            
            /// <summary>
            /// Enum CancelledEnum for cancelled
            /// </summary>
            [EnumMember(Value = "cancelled")]
            CancelledEnum = 2
        }

        /// <summary>
        /// An explanation for the fulfillment status change
        /// </summary>
        /// <value>An explanation for the fulfillment status change</value>
        [Required]
        [DataMember(Name="fulfillmentStatus")]
        public FulfillmentStatusEnum? FulfillmentStatus { get; set; }

        /// <summary>
        /// An explanation for the fulfillment status change
        /// </summary>
        /// <value>An explanation for the fulfillment status change</value>
        [Required]
        [DataMember(Name="fulfillmentDescription")]
        public string FulfillmentDescription { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LineItem {\n");
            sb.Append("  ItemNumber: ").Append(ItemNumber).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  FulfilledOnTimeStamp: ").Append(FulfilledOnTimeStamp).Append("\n");
            sb.Append("  FulfillmentStatus: ").Append(FulfillmentStatus).Append("\n");
            sb.Append("  FulfillmentDescription: ").Append(FulfillmentDescription).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((LineItem)obj);
        }

        /// <summary>
        /// Returns true if LineItem instances are equal
        /// </summary>
        /// <param name="other">Instance of LineItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LineItem other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ItemNumber == other.ItemNumber ||
                    ItemNumber != null &&
                    ItemNumber.Equals(other.ItemNumber)
                ) && 
                (
                    Quantity == other.Quantity ||
                    Quantity != null &&
                    Quantity.Equals(other.Quantity)
                ) && 
                (
                    FulfilledOnTimeStamp == other.FulfilledOnTimeStamp ||
                    FulfilledOnTimeStamp != null &&
                    FulfilledOnTimeStamp.Equals(other.FulfilledOnTimeStamp)
                ) && 
                (
                    FulfillmentStatus == other.FulfillmentStatus ||
                    FulfillmentStatus != null &&
                    FulfillmentStatus.Equals(other.FulfillmentStatus)
                ) && 
                (
                    FulfillmentDescription == other.FulfillmentDescription ||
                    FulfillmentDescription != null &&
                    FulfillmentDescription.Equals(other.FulfillmentDescription)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ItemNumber != null)
                    hashCode = hashCode * 59 + ItemNumber.GetHashCode();
                    if (Quantity != null)
                    hashCode = hashCode * 59 + Quantity.GetHashCode();
                    if (FulfilledOnTimeStamp != null)
                    hashCode = hashCode * 59 + FulfilledOnTimeStamp.GetHashCode();
                    if (FulfillmentStatus != null)
                    hashCode = hashCode * 59 + FulfillmentStatus.GetHashCode();
                    if (FulfillmentDescription != null)
                    hashCode = hashCode * 59 + FulfillmentDescription.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(LineItem left, LineItem right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(LineItem left, LineItem right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
