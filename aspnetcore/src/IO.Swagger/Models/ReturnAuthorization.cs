/*
 * Costco Fulfillment API
 *
 * An API for fullfilling orders placed on non-Costco channels by Costco 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ReturnAuthorization : IEquatable<ReturnAuthorization>
    { 
        /// <summary>
        /// Gets or Sets ExecutionStatus
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ExecutionStatusEnum
        {
            
            /// <summary>
            /// Enum ExecutedEnum for executed
            /// </summary>
            [EnumMember(Value = "executed")]
            ExecutedEnum = 1,
            
            /// <summary>
            /// Enum RejectedEnum for rejected
            /// </summary>
            [EnumMember(Value = "rejected")]
            RejectedEnum = 2,
            
            /// <summary>
            /// Enum ExecutedWithVarianceEnum for executedWithVariance
            /// </summary>
            [EnumMember(Value = "executedWithVariance")]
            ExecutedWithVarianceEnum = 3
        }

        /// <summary>
        /// Gets or Sets ExecutionStatus
        /// </summary>
        [Required]
        [DataMember(Name="executionStatus")]
        public ExecutionStatusEnum? ExecutionStatus { get; set; }

        /// <summary>
        /// The Partner Return Authorization Number
        /// </summary>
        /// <value>The Partner Return Authorization Number</value>
        [Required]
        [DataMember(Name="partnerAuthorizationNumber")]
        public string PartnerAuthorizationNumber { get; set; }

        /// <summary>
        /// Gets or Sets ReturnDispositions
        /// </summary>
        [DataMember(Name="returnDispositions")]
        public List<ReturnAuthorizationReturnDispositions> ReturnDispositions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReturnAuthorization {\n");
            sb.Append("  ExecutionStatus: ").Append(ExecutionStatus).Append("\n");
            sb.Append("  PartnerAuthorizationNumber: ").Append(PartnerAuthorizationNumber).Append("\n");
            sb.Append("  ReturnDispositions: ").Append(ReturnDispositions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ReturnAuthorization)obj);
        }

        /// <summary>
        /// Returns true if ReturnAuthorization instances are equal
        /// </summary>
        /// <param name="other">Instance of ReturnAuthorization to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReturnAuthorization other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ExecutionStatus == other.ExecutionStatus ||
                    ExecutionStatus != null &&
                    ExecutionStatus.Equals(other.ExecutionStatus)
                ) && 
                (
                    PartnerAuthorizationNumber == other.PartnerAuthorizationNumber ||
                    PartnerAuthorizationNumber != null &&
                    PartnerAuthorizationNumber.Equals(other.PartnerAuthorizationNumber)
                ) && 
                (
                    ReturnDispositions == other.ReturnDispositions ||
                    ReturnDispositions != null &&
                    ReturnDispositions.SequenceEqual(other.ReturnDispositions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ExecutionStatus != null)
                    hashCode = hashCode * 59 + ExecutionStatus.GetHashCode();
                    if (PartnerAuthorizationNumber != null)
                    hashCode = hashCode * 59 + PartnerAuthorizationNumber.GetHashCode();
                    if (ReturnDispositions != null)
                    hashCode = hashCode * 59 + ReturnDispositions.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ReturnAuthorization left, ReturnAuthorization right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ReturnAuthorization left, ReturnAuthorization right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
