/*
 * Costco Fulfillment API
 *
 * An API for fullfilling orders placed on non-Costco channels by Costco 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class InlineResponse2005 : IEquatable<InlineResponse2005>
    { 
        /// <summary>
        /// The status of the fulfillment request
        /// </summary>
        /// <value>The status of the fulfillment request</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum RequestStatusEnum
        {
            
            /// <summary>
            /// Enum OkEnum for ok
            /// </summary>
            [EnumMember(Value = "ok")]
            OkEnum = 1,
            
            /// <summary>
            /// Enum InvalidOrderStateEnum for invalidOrderState
            /// </summary>
            [EnumMember(Value = "invalidOrderState")]
            InvalidOrderStateEnum = 2,
            
            /// <summary>
            /// Enum InvalidLinesEnum for invalidLines
            /// </summary>
            [EnumMember(Value = "invalidLines")]
            InvalidLinesEnum = 3,
            
            /// <summary>
            /// Enum InsufficientFundsEnum for insufficientFunds
            /// </summary>
            [EnumMember(Value = "insufficientFunds")]
            InsufficientFundsEnum = 4,
            
            /// <summary>
            /// Enum InvalidLocationEnum for invalidLocation
            /// </summary>
            [EnumMember(Value = "invalidLocation")]
            InvalidLocationEnum = 5,
            
            /// <summary>
            /// Enum AgeVerificationRequiredEnum for ageVerificationRequired
            /// </summary>
            [EnumMember(Value = "ageVerificationRequired")]
            AgeVerificationRequiredEnum = 6
        }

        /// <summary>
        /// The status of the fulfillment request
        /// </summary>
        /// <value>The status of the fulfillment request</value>
        [Required]
        [DataMember(Name="requestStatus")]
        public RequestStatusEnum? RequestStatus { get; set; }

        /// <summary>
        /// The barcode to be used at POS to tender this order
        /// </summary>
        /// <value>The barcode to be used at POS to tender this order</value>
        [DataMember(Name="barCode")]
        public string BarCode { get; set; }

        /// <summary>
        /// Gets or Sets PartnerOrder
        /// </summary>
        [DataMember(Name="partnerOrder")]
        public InlineResponse2005PartnerOrder PartnerOrder { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse2005 {\n");
            sb.Append("  RequestStatus: ").Append(RequestStatus).Append("\n");
            sb.Append("  BarCode: ").Append(BarCode).Append("\n");
            sb.Append("  PartnerOrder: ").Append(PartnerOrder).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((InlineResponse2005)obj);
        }

        /// <summary>
        /// Returns true if InlineResponse2005 instances are equal
        /// </summary>
        /// <param name="other">Instance of InlineResponse2005 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2005 other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    RequestStatus == other.RequestStatus ||
                    RequestStatus != null &&
                    RequestStatus.Equals(other.RequestStatus)
                ) && 
                (
                    BarCode == other.BarCode ||
                    BarCode != null &&
                    BarCode.Equals(other.BarCode)
                ) && 
                (
                    PartnerOrder == other.PartnerOrder ||
                    PartnerOrder != null &&
                    PartnerOrder.Equals(other.PartnerOrder)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (RequestStatus != null)
                    hashCode = hashCode * 59 + RequestStatus.GetHashCode();
                    if (BarCode != null)
                    hashCode = hashCode * 59 + BarCode.GetHashCode();
                    if (PartnerOrder != null)
                    hashCode = hashCode * 59 + PartnerOrder.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(InlineResponse2005 left, InlineResponse2005 right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(InlineResponse2005 left, InlineResponse2005 right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
