/*
 * Costco Fulfillment API
 *
 * An API for fullfilling orders placed on non-Costco channels by Costco 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// A representation of a Costco Member
    /// </summary>
    [DataContract]
    public partial class Membership : IEquatable<Membership>
    { 
        /// <summary>
        /// The Costco membership number of the purchaser
        /// </summary>
        /// <value>The Costco membership number of the purchaser</value>
        [Required]
        [DataMember(Name="memberNumber")]
        public string MemberNumber { get; set; }

        /// <summary>
        /// The full name of the Costco member
        /// </summary>
        /// <value>The full name of the Costco member</value>
        [Required]
        [DataMember(Name="memberName")]
        public string MemberName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Membership {\n");
            sb.Append("  MemberNumber: ").Append(MemberNumber).Append("\n");
            sb.Append("  MemberName: ").Append(MemberName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Membership)obj);
        }

        /// <summary>
        /// Returns true if Membership instances are equal
        /// </summary>
        /// <param name="other">Instance of Membership to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Membership other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    MemberNumber == other.MemberNumber ||
                    MemberNumber != null &&
                    MemberNumber.Equals(other.MemberNumber)
                ) && 
                (
                    MemberName == other.MemberName ||
                    MemberName != null &&
                    MemberName.Equals(other.MemberName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (MemberNumber != null)
                    hashCode = hashCode * 59 + MemberNumber.GetHashCode();
                    if (MemberName != null)
                    hashCode = hashCode * 59 + MemberName.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Membership left, Membership right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Membership left, Membership right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
