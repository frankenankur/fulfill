/*
 * Costco Fulfillment API
 *
 * An API for fullfilling orders placed on non-Costco channels by Costco 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class LoyaltyProgramsmembershipsMembersHouseholdMember : IEquatable<LoyaltyProgramsmembershipsMembersHouseholdMember>
    { 
        /// <summary>
        /// The first name of the member
        /// </summary>
        /// <value>The first name of the member</value>
        [Required]
        [DataMember(Name="memberFirstName")]
        public string MemberFirstName { get; set; }

        /// <summary>
        /// The last name of the member
        /// </summary>
        /// <value>The last name of the member</value>
        [Required]
        [DataMember(Name="memberLastName")]
        public string MemberLastName { get; set; }

        /// <summary>
        /// The primary email address of the member
        /// </summary>
        /// <value>The primary email address of the member</value>
        [Required]
        [DataMember(Name="memberEmail")]
        public string MemberEmail { get; set; }

        /// <summary>
        /// The primary phone number of the member
        /// </summary>
        /// <value>The primary phone number of the member</value>
        [Required]
        [DataMember(Name="memberPrimaryPhone")]
        public string MemberPrimaryPhone { get; set; }

        /// <summary>
        /// Gets or Sets Marketing
        /// </summary>
        [Required]
        [DataMember(Name="marketing")]
        public LoyaltyProgramsmembershipsMembersHouseholdMemberMarketing Marketing { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LoyaltyProgramsmembershipsMembersHouseholdMember {\n");
            sb.Append("  MemberFirstName: ").Append(MemberFirstName).Append("\n");
            sb.Append("  MemberLastName: ").Append(MemberLastName).Append("\n");
            sb.Append("  MemberEmail: ").Append(MemberEmail).Append("\n");
            sb.Append("  MemberPrimaryPhone: ").Append(MemberPrimaryPhone).Append("\n");
            sb.Append("  Marketing: ").Append(Marketing).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((LoyaltyProgramsmembershipsMembersHouseholdMember)obj);
        }

        /// <summary>
        /// Returns true if LoyaltyProgramsmembershipsMembersHouseholdMember instances are equal
        /// </summary>
        /// <param name="other">Instance of LoyaltyProgramsmembershipsMembersHouseholdMember to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LoyaltyProgramsmembershipsMembersHouseholdMember other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    MemberFirstName == other.MemberFirstName ||
                    MemberFirstName != null &&
                    MemberFirstName.Equals(other.MemberFirstName)
                ) && 
                (
                    MemberLastName == other.MemberLastName ||
                    MemberLastName != null &&
                    MemberLastName.Equals(other.MemberLastName)
                ) && 
                (
                    MemberEmail == other.MemberEmail ||
                    MemberEmail != null &&
                    MemberEmail.Equals(other.MemberEmail)
                ) && 
                (
                    MemberPrimaryPhone == other.MemberPrimaryPhone ||
                    MemberPrimaryPhone != null &&
                    MemberPrimaryPhone.Equals(other.MemberPrimaryPhone)
                ) && 
                (
                    Marketing == other.Marketing ||
                    Marketing != null &&
                    Marketing.Equals(other.Marketing)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (MemberFirstName != null)
                    hashCode = hashCode * 59 + MemberFirstName.GetHashCode();
                    if (MemberLastName != null)
                    hashCode = hashCode * 59 + MemberLastName.GetHashCode();
                    if (MemberEmail != null)
                    hashCode = hashCode * 59 + MemberEmail.GetHashCode();
                    if (MemberPrimaryPhone != null)
                    hashCode = hashCode * 59 + MemberPrimaryPhone.GetHashCode();
                    if (Marketing != null)
                    hashCode = hashCode * 59 + Marketing.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(LoyaltyProgramsmembershipsMembersHouseholdMember left, LoyaltyProgramsmembershipsMembersHouseholdMember right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(LoyaltyProgramsmembershipsMembersHouseholdMember left, LoyaltyProgramsmembershipsMembersHouseholdMember right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
