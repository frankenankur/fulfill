/*
 * Costco Fulfillment API
 *
 * An API for fullfilling orders placed on non-Costco channels by Costco 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class InlineResponse2008MembershipOrder : IEquatable<InlineResponse2008MembershipOrder>
    { 
        /// <summary>
        /// the currency code for which all monetary values will be assumed
        /// </summary>
        /// <value>the currency code for which all monetary values will be assumed</value>
        [Required]
        [DataMember(Name="currency")]
        public string Currency { get; set; }

        /// <summary>
        /// The total cost of the order minus shipping and taxes, represented as a number
        /// </summary>
        /// <value>The total cost of the order minus shipping and taxes, represented as a number</value>
        [Required]
        [DataMember(Name="subTotal")]
        public decimal? SubTotal { get; set; }

        /// <summary>
        /// The total cost of shipping on the order minus taxes on shipping, represented as a number
        /// </summary>
        /// <value>The total cost of shipping on the order minus taxes on shipping, represented as a number</value>
        [Required]
        [DataMember(Name="shippingTotal")]
        public decimal? ShippingTotal { get; set; }

        /// <summary>
        /// The total cost of taxes on the order across items, shipping and linked fees, represented as a number
        /// </summary>
        /// <value>The total cost of taxes on the order across items, shipping and linked fees, represented as a number</value>
        [Required]
        [DataMember(Name="taxTotal")]
        public decimal? TaxTotal { get; set; }

        /// <summary>
        /// Gets or Sets MembershipLineItem
        /// </summary>
        [Required]
        [DataMember(Name="membershipLineItem")]
        public LineItem MembershipLineItem { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse2008MembershipOrder {\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  SubTotal: ").Append(SubTotal).Append("\n");
            sb.Append("  ShippingTotal: ").Append(ShippingTotal).Append("\n");
            sb.Append("  TaxTotal: ").Append(TaxTotal).Append("\n");
            sb.Append("  MembershipLineItem: ").Append(MembershipLineItem).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((InlineResponse2008MembershipOrder)obj);
        }

        /// <summary>
        /// Returns true if InlineResponse2008MembershipOrder instances are equal
        /// </summary>
        /// <param name="other">Instance of InlineResponse2008MembershipOrder to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2008MembershipOrder other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Currency == other.Currency ||
                    Currency != null &&
                    Currency.Equals(other.Currency)
                ) && 
                (
                    SubTotal == other.SubTotal ||
                    SubTotal != null &&
                    SubTotal.Equals(other.SubTotal)
                ) && 
                (
                    ShippingTotal == other.ShippingTotal ||
                    ShippingTotal != null &&
                    ShippingTotal.Equals(other.ShippingTotal)
                ) && 
                (
                    TaxTotal == other.TaxTotal ||
                    TaxTotal != null &&
                    TaxTotal.Equals(other.TaxTotal)
                ) && 
                (
                    MembershipLineItem == other.MembershipLineItem ||
                    MembershipLineItem != null &&
                    MembershipLineItem.Equals(other.MembershipLineItem)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Currency != null)
                    hashCode = hashCode * 59 + Currency.GetHashCode();
                    if (SubTotal != null)
                    hashCode = hashCode * 59 + SubTotal.GetHashCode();
                    if (ShippingTotal != null)
                    hashCode = hashCode * 59 + ShippingTotal.GetHashCode();
                    if (TaxTotal != null)
                    hashCode = hashCode * 59 + TaxTotal.GetHashCode();
                    if (MembershipLineItem != null)
                    hashCode = hashCode * 59 + MembershipLineItem.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(InlineResponse2008MembershipOrder left, InlineResponse2008MembershipOrder right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(InlineResponse2008MembershipOrder left, InlineResponse2008MembershipOrder right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
