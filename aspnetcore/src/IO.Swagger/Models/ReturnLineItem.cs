/*
 * Costco Fullfillment API
 *
 * An API for fullfilling orders placed on non-Costco channels by Costco 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ReturnLineItem :  IEquatable<ReturnLineItem>
    { 
        /// <summary>
        /// The unique id of the line item that is  being returned
        /// </summary>
        /// <value>The unique id of the line item that is  being returned</value>
        [DataMember(Name="referenceNumber")]
        public string ReferenceNumber { get; set; }

        /// <summary>
        /// The Costco item number to be returned
        /// </summary>
        /// <value>The Costco item number to be returned</value>
        [Required]
        [DataMember(Name="itemNumber")]
        public string ItemNumber { get; set; }

        /// <summary>
        /// The quantity to be returned
        /// </summary>
        /// <value>The quantity to be returned</value>
        [Required]
        [DataMember(Name="quantity")]
        public decimal? Quantity { get; set; }
        /// <summary>
        /// Gets or Sets ReturnReason
        /// </summary>
        public enum ReturnReasonEnum
        { 
            /// <summary>
            /// Enum CustomerDiscretionaryReturnEnum for "customerDiscretionaryReturn"
            /// </summary>
            [EnumMember(Value = "customerDiscretionaryReturn")]
            CustomerDiscretionaryReturnEnum = 1,
            
            /// <summary>
            /// Enum CustomerInitiatedMerchantCancelEnum for "customerInitiatedMerchantCancel"
            /// </summary>
            [EnumMember(Value = "customerInitiatedMerchantCancel")]
            CustomerInitiatedMerchantCancelEnum = 2,
            
            /// <summary>
            /// Enum InvalidCouponEnum for "invalidCoupon"
            /// </summary>
            [EnumMember(Value = "invalidCoupon")]
            InvalidCouponEnum = 3,
            
            /// <summary>
            /// Enum MalformedShippingAddressEnum for "malformedShippingAddress"
            /// </summary>
            [EnumMember(Value = "malformedShippingAddress")]
            MalformedShippingAddressEnum = 4,
            
            /// <summary>
            /// Enum OtherEnum for "other"
            /// </summary>
            [EnumMember(Value = "other")]
            OtherEnum = 5,
            
            /// <summary>
            /// Enum ProductArrivedDamagedEnum for "productArrivedDamaged"
            /// </summary>
            [EnumMember(Value = "productArrivedDamaged")]
            ProductArrivedDamagedEnum = 6,
            
            /// <summary>
            /// Enum UndeliverableShippingAddressEnum for "undeliverableShippingAddress"
            /// </summary>
            [EnumMember(Value = "undeliverableShippingAddress")]
            UndeliverableShippingAddressEnum = 7,
            
            /// <summary>
            /// Enum UnsupportedPoBoxAddressEnum for "unsupportedPoBoxAddress"
            /// </summary>
            [EnumMember(Value = "unsupportedPoBoxAddress")]
            UnsupportedPoBoxAddressEnum = 8,
            
            /// <summary>
            /// Enum WrongProductShippedEnum for "wrongProductShipped"
            /// </summary>
            [EnumMember(Value = "wrongProductShipped")]
            WrongProductShippedEnum = 9
        }

        /// <summary>
        /// Gets or Sets ReturnReason
        /// </summary>
        [DataMember(Name="returnReason")]
        public ReturnReasonEnum? ReturnReason { get; set; }

        /// <summary>
        /// The explanation of the reason.
        /// </summary>
        /// <value>The explanation of the reason.</value>
        [DataMember(Name="reasonText")]
        public string ReasonText { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReturnLineItem {\n");
            sb.Append("  ReferenceNumber: ").Append(ReferenceNumber).Append("\n");
            sb.Append("  ItemNumber: ").Append(ItemNumber).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  ReturnReason: ").Append(ReturnReason).Append("\n");
            sb.Append("  ReasonText: ").Append(ReasonText).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ReturnLineItem)obj);
        }

        /// <summary>
        /// Returns true if ReturnLineItem instances are equal
        /// </summary>
        /// <param name="other">Instance of ReturnLineItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReturnLineItem other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ReferenceNumber == other.ReferenceNumber ||
                    ReferenceNumber != null &&
                    ReferenceNumber.Equals(other.ReferenceNumber)
                ) && 
                (
                    ItemNumber == other.ItemNumber ||
                    ItemNumber != null &&
                    ItemNumber.Equals(other.ItemNumber)
                ) && 
                (
                    Quantity == other.Quantity ||
                    Quantity != null &&
                    Quantity.Equals(other.Quantity)
                ) && 
                (
                    ReturnReason == other.ReturnReason ||
                    ReturnReason != null &&
                    ReturnReason.Equals(other.ReturnReason)
                ) && 
                (
                    ReasonText == other.ReasonText ||
                    ReasonText != null &&
                    ReasonText.Equals(other.ReasonText)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ReferenceNumber != null)
                    hashCode = hashCode * 59 + ReferenceNumber.GetHashCode();
                    if (ItemNumber != null)
                    hashCode = hashCode * 59 + ItemNumber.GetHashCode();
                    if (Quantity != null)
                    hashCode = hashCode * 59 + Quantity.GetHashCode();
                    if (ReturnReason != null)
                    hashCode = hashCode * 59 + ReturnReason.GetHashCode();
                    if (ReasonText != null)
                    hashCode = hashCode * 59 + ReasonText.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ReturnLineItem left, ReturnLineItem right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ReturnLineItem left, ReturnLineItem right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
