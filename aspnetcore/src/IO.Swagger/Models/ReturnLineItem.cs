/*
 * Costco Fulfillment API
 *
 * An API for fullfilling orders placed on non-Costco channels by Costco 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ReturnLineItem : IEquatable<ReturnLineItem>
    { 
        /// <summary>
        /// The unique id of the line item that is  being returned
        /// </summary>
        /// <value>The unique id of the line item that is  being returned</value>
        [DataMember(Name="referenceNumber")]
        public string ReferenceNumber { get; set; }

        /// <summary>
        /// The Costco item number to be returned
        /// </summary>
        /// <value>The Costco item number to be returned</value>
        [Required]
        [DataMember(Name="itemNumber")]
        public string ItemNumber { get; set; }

        /// <summary>
        /// The quantity to be returned
        /// </summary>
        /// <value>The quantity to be returned</value>
        [Required]
        [DataMember(Name="quantity")]
        public decimal? Quantity { get; set; }

        /// <summary>
        /// Gets or Sets ReturnReason
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ReturnReasonEnum
        {
            
            /// <summary>
            /// Enum NotAsExpectedEnum for notAsExpected
            /// </summary>
            [EnumMember(Value = "notAsExpected")]
            NotAsExpectedEnum = 1,
            
            /// <summary>
            /// Enum DamagedEnum for damaged
            /// </summary>
            [EnumMember(Value = "damaged")]
            DamagedEnum = 2,
            
            /// <summary>
            /// Enum DefectiveEnum for defective
            /// </summary>
            [EnumMember(Value = "defective")]
            DefectiveEnum = 3,
            
            /// <summary>
            /// Enum WrongItemEnum for wrongItem
            /// </summary>
            [EnumMember(Value = "wrongItem")]
            WrongItemEnum = 4,
            
            /// <summary>
            /// Enum EmptyBoxEnum for emptyBox
            /// </summary>
            [EnumMember(Value = "emptyBox")]
            EmptyBoxEnum = 5,
            
            /// <summary>
            /// Enum NotDeliveredEnum for notDelivered
            /// </summary>
            [EnumMember(Value = "notDelivered")]
            NotDeliveredEnum = 6,
            
            /// <summary>
            /// Enum ShortShippedEnum for shortShipped
            /// </summary>
            [EnumMember(Value = "shortShipped")]
            ShortShippedEnum = 7
        }

        /// <summary>
        /// Gets or Sets ReturnReason
        /// </summary>
        [DataMember(Name="returnReason")]
        public ReturnReasonEnum? ReturnReason { get; set; }

        /// <summary>
        /// The explanation of the reason.
        /// </summary>
        /// <value>The explanation of the reason.</value>
        [DataMember(Name="reasonText")]
        public string ReasonText { get; set; }

        /// <summary>
        /// The refund amount, represented as a number
        /// </summary>
        /// <value>The refund amount, represented as a number</value>
        [DataMember(Name="refundAmount")]
        public decimal? RefundAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReturnLineItem {\n");
            sb.Append("  ReferenceNumber: ").Append(ReferenceNumber).Append("\n");
            sb.Append("  ItemNumber: ").Append(ItemNumber).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  ReturnReason: ").Append(ReturnReason).Append("\n");
            sb.Append("  ReasonText: ").Append(ReasonText).Append("\n");
            sb.Append("  RefundAmount: ").Append(RefundAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ReturnLineItem)obj);
        }

        /// <summary>
        /// Returns true if ReturnLineItem instances are equal
        /// </summary>
        /// <param name="other">Instance of ReturnLineItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReturnLineItem other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ReferenceNumber == other.ReferenceNumber ||
                    ReferenceNumber != null &&
                    ReferenceNumber.Equals(other.ReferenceNumber)
                ) && 
                (
                    ItemNumber == other.ItemNumber ||
                    ItemNumber != null &&
                    ItemNumber.Equals(other.ItemNumber)
                ) && 
                (
                    Quantity == other.Quantity ||
                    Quantity != null &&
                    Quantity.Equals(other.Quantity)
                ) && 
                (
                    ReturnReason == other.ReturnReason ||
                    ReturnReason != null &&
                    ReturnReason.Equals(other.ReturnReason)
                ) && 
                (
                    ReasonText == other.ReasonText ||
                    ReasonText != null &&
                    ReasonText.Equals(other.ReasonText)
                ) && 
                (
                    RefundAmount == other.RefundAmount ||
                    RefundAmount != null &&
                    RefundAmount.Equals(other.RefundAmount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ReferenceNumber != null)
                    hashCode = hashCode * 59 + ReferenceNumber.GetHashCode();
                    if (ItemNumber != null)
                    hashCode = hashCode * 59 + ItemNumber.GetHashCode();
                    if (Quantity != null)
                    hashCode = hashCode * 59 + Quantity.GetHashCode();
                    if (ReturnReason != null)
                    hashCode = hashCode * 59 + ReturnReason.GetHashCode();
                    if (ReasonText != null)
                    hashCode = hashCode * 59 + ReasonText.GetHashCode();
                    if (RefundAmount != null)
                    hashCode = hashCode * 59 + RefundAmount.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ReturnLineItem left, ReturnLineItem right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ReturnLineItem left, ReturnLineItem right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
