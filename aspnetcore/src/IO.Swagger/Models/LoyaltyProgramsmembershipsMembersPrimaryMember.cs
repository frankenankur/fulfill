/*
 * Costco Fulfillment API
 *
 * An API for fullfilling orders placed on non-Costco channels by Costco 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class LoyaltyProgramsmembershipsMembersPrimaryMember : IEquatable<LoyaltyProgramsmembershipsMembersPrimaryMember>
    { 
        /// <summary>
        /// the prefix for the member name
        /// </summary>
        /// <value>the prefix for the member name</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum MemberNamePrefixEnum
        {
            
            /// <summary>
            /// Enum MrEnum for Mr
            /// </summary>
            [EnumMember(Value = "Mr")]
            MrEnum = 1,
            
            /// <summary>
            /// Enum MrsEnum for Mrs
            /// </summary>
            [EnumMember(Value = "Mrs")]
            MrsEnum = 2,
            
            /// <summary>
            /// Enum MsEnum for Ms
            /// </summary>
            [EnumMember(Value = "Ms")]
            MsEnum = 3,
            
            /// <summary>
            /// Enum DrEnum for Dr
            /// </summary>
            [EnumMember(Value = "Dr")]
            DrEnum = 4,
            
            /// <summary>
            /// Enum ProfEnum for Prof
            /// </summary>
            [EnumMember(Value = "Prof")]
            ProfEnum = 5,
            
            /// <summary>
            /// Enum RevEnum for Rev
            /// </summary>
            [EnumMember(Value = "Rev")]
            RevEnum = 6
        }

        /// <summary>
        /// the prefix for the member name
        /// </summary>
        /// <value>the prefix for the member name</value>
        [DataMember(Name="memberNamePrefix")]
        public MemberNamePrefixEnum? MemberNamePrefix { get; set; }

        /// <summary>
        /// The first name of the member
        /// </summary>
        /// <value>The first name of the member</value>
        [Required]
        [DataMember(Name="memberFirstName")]
        public string MemberFirstName { get; set; }

        /// <summary>
        /// the middle initial of the member
        /// </summary>
        /// <value>the middle initial of the member</value>
        [DataMember(Name="memberMiddleInitial")]
        public string MemberMiddleInitial { get; set; }

        /// <summary>
        /// The last name of the member
        /// </summary>
        /// <value>The last name of the member</value>
        [Required]
        [DataMember(Name="memberLastName")]
        public string MemberLastName { get; set; }

        /// <summary>
        /// the suffix for the member name
        /// </summary>
        /// <value>the suffix for the member name</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum MemberNameSuffixEnum
        {
            
            /// <summary>
            /// Enum JrEnum for Jr
            /// </summary>
            [EnumMember(Value = "Jr")]
            JrEnum = 1,
            
            /// <summary>
            /// Enum SrEnum for Sr
            /// </summary>
            [EnumMember(Value = "Sr")]
            SrEnum = 2,
            
            /// <summary>
            /// Enum IIEnum for II
            /// </summary>
            [EnumMember(Value = "II")]
            IIEnum = 3,
            
            /// <summary>
            /// Enum IIIEnum for III
            /// </summary>
            [EnumMember(Value = "III")]
            IIIEnum = 4,
            
            /// <summary>
            /// Enum IVEnum for IV
            /// </summary>
            [EnumMember(Value = "IV")]
            IVEnum = 5,
            
            /// <summary>
            /// Enum EsqEnum for Esq
            /// </summary>
            [EnumMember(Value = "Esq")]
            EsqEnum = 6,
            
            /// <summary>
            /// Enum PhDEnum for PhD
            /// </summary>
            [EnumMember(Value = "PhD")]
            PhDEnum = 7,
            
            /// <summary>
            /// Enum MDEnum for M.D
            /// </summary>
            [EnumMember(Value = "M.D")]
            MDEnum = 8,
            
            /// <summary>
            /// Enum RNEnum for R.N
            /// </summary>
            [EnumMember(Value = "R.N")]
            RNEnum = 9,
            
            /// <summary>
            /// Enum DDSEnum for DDS
            /// </summary>
            [EnumMember(Value = "DDS")]
            DDSEnum = 10
        }

        /// <summary>
        /// the suffix for the member name
        /// </summary>
        /// <value>the suffix for the member name</value>
        [DataMember(Name="memberNameSuffix")]
        public MemberNameSuffixEnum? MemberNameSuffix { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [Required]
        [DataMember(Name="address")]
        public Address Address { get; set; }

        /// <summary>
        /// The primary phone number of the member
        /// </summary>
        /// <value>The primary phone number of the member</value>
        [Required]
        [DataMember(Name="memberPrimaryPhone")]
        public string MemberPrimaryPhone { get; set; }

        /// <summary>
        /// The primary email address of the member
        /// </summary>
        /// <value>The primary email address of the member</value>
        [Required]
        [DataMember(Name="memberEmail")]
        public string MemberEmail { get; set; }

        /// <summary>
        /// the date of birth of the member
        /// </summary>
        /// <value>the date of birth of the member</value>
        [DataMember(Name="memberDateOfBirth")]
        public DateTime? MemberDateOfBirth { get; set; }

        /// <summary>
        /// The mobile phone number of the member
        /// </summary>
        /// <value>The mobile phone number of the member</value>
        [Required]
        [DataMember(Name="memberMobilePhone")]
        public string MemberMobilePhone { get; set; }

        /// <summary>
        /// Gets or Sets Marketing
        /// </summary>
        [Required]
        [DataMember(Name="marketing")]
        public LoyaltyProgramsmembershipsMembersPrimaryMemberMarketing Marketing { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LoyaltyProgramsmembershipsMembersPrimaryMember {\n");
            sb.Append("  MemberNamePrefix: ").Append(MemberNamePrefix).Append("\n");
            sb.Append("  MemberFirstName: ").Append(MemberFirstName).Append("\n");
            sb.Append("  MemberMiddleInitial: ").Append(MemberMiddleInitial).Append("\n");
            sb.Append("  MemberLastName: ").Append(MemberLastName).Append("\n");
            sb.Append("  MemberNameSuffix: ").Append(MemberNameSuffix).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  MemberPrimaryPhone: ").Append(MemberPrimaryPhone).Append("\n");
            sb.Append("  MemberEmail: ").Append(MemberEmail).Append("\n");
            sb.Append("  MemberDateOfBirth: ").Append(MemberDateOfBirth).Append("\n");
            sb.Append("  MemberMobilePhone: ").Append(MemberMobilePhone).Append("\n");
            sb.Append("  Marketing: ").Append(Marketing).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((LoyaltyProgramsmembershipsMembersPrimaryMember)obj);
        }

        /// <summary>
        /// Returns true if LoyaltyProgramsmembershipsMembersPrimaryMember instances are equal
        /// </summary>
        /// <param name="other">Instance of LoyaltyProgramsmembershipsMembersPrimaryMember to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LoyaltyProgramsmembershipsMembersPrimaryMember other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    MemberNamePrefix == other.MemberNamePrefix ||
                    MemberNamePrefix != null &&
                    MemberNamePrefix.Equals(other.MemberNamePrefix)
                ) && 
                (
                    MemberFirstName == other.MemberFirstName ||
                    MemberFirstName != null &&
                    MemberFirstName.Equals(other.MemberFirstName)
                ) && 
                (
                    MemberMiddleInitial == other.MemberMiddleInitial ||
                    MemberMiddleInitial != null &&
                    MemberMiddleInitial.Equals(other.MemberMiddleInitial)
                ) && 
                (
                    MemberLastName == other.MemberLastName ||
                    MemberLastName != null &&
                    MemberLastName.Equals(other.MemberLastName)
                ) && 
                (
                    MemberNameSuffix == other.MemberNameSuffix ||
                    MemberNameSuffix != null &&
                    MemberNameSuffix.Equals(other.MemberNameSuffix)
                ) && 
                (
                    Address == other.Address ||
                    Address != null &&
                    Address.Equals(other.Address)
                ) && 
                (
                    MemberPrimaryPhone == other.MemberPrimaryPhone ||
                    MemberPrimaryPhone != null &&
                    MemberPrimaryPhone.Equals(other.MemberPrimaryPhone)
                ) && 
                (
                    MemberEmail == other.MemberEmail ||
                    MemberEmail != null &&
                    MemberEmail.Equals(other.MemberEmail)
                ) && 
                (
                    MemberDateOfBirth == other.MemberDateOfBirth ||
                    MemberDateOfBirth != null &&
                    MemberDateOfBirth.Equals(other.MemberDateOfBirth)
                ) && 
                (
                    MemberMobilePhone == other.MemberMobilePhone ||
                    MemberMobilePhone != null &&
                    MemberMobilePhone.Equals(other.MemberMobilePhone)
                ) && 
                (
                    Marketing == other.Marketing ||
                    Marketing != null &&
                    Marketing.Equals(other.Marketing)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (MemberNamePrefix != null)
                    hashCode = hashCode * 59 + MemberNamePrefix.GetHashCode();
                    if (MemberFirstName != null)
                    hashCode = hashCode * 59 + MemberFirstName.GetHashCode();
                    if (MemberMiddleInitial != null)
                    hashCode = hashCode * 59 + MemberMiddleInitial.GetHashCode();
                    if (MemberLastName != null)
                    hashCode = hashCode * 59 + MemberLastName.GetHashCode();
                    if (MemberNameSuffix != null)
                    hashCode = hashCode * 59 + MemberNameSuffix.GetHashCode();
                    if (Address != null)
                    hashCode = hashCode * 59 + Address.GetHashCode();
                    if (MemberPrimaryPhone != null)
                    hashCode = hashCode * 59 + MemberPrimaryPhone.GetHashCode();
                    if (MemberEmail != null)
                    hashCode = hashCode * 59 + MemberEmail.GetHashCode();
                    if (MemberDateOfBirth != null)
                    hashCode = hashCode * 59 + MemberDateOfBirth.GetHashCode();
                    if (MemberMobilePhone != null)
                    hashCode = hashCode * 59 + MemberMobilePhone.GetHashCode();
                    if (Marketing != null)
                    hashCode = hashCode * 59 + Marketing.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(LoyaltyProgramsmembershipsMembersPrimaryMember left, LoyaltyProgramsmembershipsMembersPrimaryMember right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(LoyaltyProgramsmembershipsMembersPrimaryMember left, LoyaltyProgramsmembershipsMembersPrimaryMember right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
