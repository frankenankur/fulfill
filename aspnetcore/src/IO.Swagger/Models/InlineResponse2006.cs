/*
 * Costco Fulfillment API
 *
 * An API for fullfilling orders placed on non-Costco channels by Costco 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class InlineResponse2006 : IEquatable<InlineResponse2006>
    { 
        /// <summary>
        /// The status of the fulfillment request
        /// </summary>
        /// <value>The status of the fulfillment request</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum InvalidOrderEnum for invalidOrder
            /// </summary>
            [EnumMember(Value = "invalidOrder")]
            InvalidOrderEnum = 1,
            
            /// <summary>
            /// Enum OkEnum for ok
            /// </summary>
            [EnumMember(Value = "ok")]
            OkEnum = 2,
            
            /// <summary>
            /// Enum UnavailableFundsEnum for unavailableFunds
            /// </summary>
            [EnumMember(Value = "unavailableFunds")]
            UnavailableFundsEnum = 3
        }

        /// <summary>
        /// The status of the fulfillment request
        /// </summary>
        /// <value>The status of the fulfillment request</value>
        [Required]
        [DataMember(Name="status")]
        public StatusEnum? Status { get; set; }

        /// <summary>
        /// The amount of the tip delta represented as a positive or negative number
        /// </summary>
        /// <value>The amount of the tip delta represented as a positive or negative number</value>
        [Required]
        [DataMember(Name="tipAdjustment")]
        public decimal? TipAdjustment { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse2006 {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TipAdjustment: ").Append(TipAdjustment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((InlineResponse2006)obj);
        }

        /// <summary>
        /// Returns true if InlineResponse2006 instances are equal
        /// </summary>
        /// <param name="other">Instance of InlineResponse2006 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2006 other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                ) && 
                (
                    TipAdjustment == other.TipAdjustment ||
                    TipAdjustment != null &&
                    TipAdjustment.Equals(other.TipAdjustment)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (TipAdjustment != null)
                    hashCode = hashCode * 59 + TipAdjustment.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(InlineResponse2006 left, InlineResponse2006 right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(InlineResponse2006 left, InlineResponse2006 right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
