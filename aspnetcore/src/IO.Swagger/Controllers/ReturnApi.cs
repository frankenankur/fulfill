/*
 * Costco Fulfillment API
 *
 * An API for fullfilling orders placed on non-Costco channels by Costco 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.WebUtilities;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Primitives;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class ReturnApiController : Controller
    { 
        /// <summary>
        /// Notification of Customer Refund
        /// </summary>
        /// <remarks>[In Design] </remarks>
        /// <param name="salesChannelId"></param>
        /// <param name="partnerOrderNumber"></param>
        /// <param name="costcoTrackingId">Unique ID to Correlate HTTP requests between a client and server.</param>
        /// <param name="body"></param>
        /// <param name="costcoEnv">Non-Production Environment Identifier</param>
        /// <response code="200">Status 200</response>
        /// <response code="400">Status 400</response>
        /// <response code="500">Status 500</response>
        [HttpPost]
        [Route("/ebusiness/{salesChannelId}/order/{partnerOrderNumber}/refund")]
        [ValidateModelState]
        [SwaggerOperation("SalesChannelIdOrderPartnerOrderNumberRefundPost")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Status 400")]
        [SwaggerResponse(statusCode: 500, type: typeof(Error), description: "Status 500")]
        public virtual IActionResult SalesChannelIdOrderPartnerOrderNumberRefundPost([FromRoute][Required]string salesChannelId, [FromRoute][Required]string partnerOrderNumber, [FromHeader][Required()]string costcoTrackingId, [FromBody]Body3 body, [FromHeader]string costcoEnv)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Error));


            throw new NotImplementedException();
        }

        /// <summary>
        /// Request Return Authorization
        /// </summary>
        /// <remarks>[Final]</remarks>
        /// <param name="salesChannelId"></param>
        /// <param name="partnerOrderNumber"></param>
        /// <param name="costcoTrackingId">Unique ID to Correlate HTTP requests between a client and server.</param>
        /// <param name="body"></param>
        /// <param name="costcoEnv">Non-Production Environment Identifier</param>
        /// <response code="200">Status 200</response>
        /// <response code="400">Status 400</response>
        /// <response code="500">Status 500</response>
        [HttpPost]
        [Route("/ebusiness/{salesChannelId}/order/{partnerOrderNumber}/return")]
        [ValidateModelState]
        [SwaggerOperation("SalesChannelIdOrderPartnerOrderNumberReturnPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(ReturnAuthorization), description: "Status 200")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Status 400")]
        [SwaggerResponse(statusCode: 500, type: typeof(Error), description: "Status 500")]
        public virtual IActionResult SalesChannelIdOrderPartnerOrderNumberReturnPost([FromRoute][Required]string salesChannelId, [FromRoute][Required]string partnerOrderNumber, [FromHeader][Required()]string costcoTrackingId, [FromBody]Body2 body, [FromHeader]string costcoEnv)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ReturnAuthorization));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Error));

            string exampleJson = null;
            exampleJson = "{\n  \"executionStatus\" : \"executed\",\n  \"partnerAuthorizationNumber\" : \"partnerAuthorizationNumber\",\n  \"returnDispositions\" : [ {\n    \"dispositionType\" : \"CallTag\",\n    \"carrier\" : \"carrier\",\n    \"orderLines\" : [ {\n      \"itemNumber\" : \"itemNumber\",\n      \"quantity\" : 0\n    }, {\n      \"itemNumber\" : \"itemNumber\",\n      \"quantity\" : 0\n    } ],\n    \"shippingLabel\" : \"shippingLabel\",\n    \"trackingId\" : \"trackingId\"\n  }, {\n    \"dispositionType\" : \"CallTag\",\n    \"carrier\" : \"carrier\",\n    \"orderLines\" : [ {\n      \"itemNumber\" : \"itemNumber\",\n      \"quantity\" : 0\n    }, {\n      \"itemNumber\" : \"itemNumber\",\n      \"quantity\" : 0\n    } ],\n    \"shippingLabel\" : \"shippingLabel\",\n    \"trackingId\" : \"trackingId\"\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ReturnAuthorization>(exampleJson)
            : default(ReturnAuthorization);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Cancel Return Authorization
        /// </summary>
        
        /// <param name="salesChannelId"></param>
        /// <param name="partnerReturnAuthorizationNumber"></param>
        /// <param name="costcoTrackingId">Unique ID to Correlate HTTP requests between a client and server.</param>
        /// <param name="costcoEnv"></param>
        /// <response code="200">Status 200</response>
        /// <response code="400">Status 400</response>
        /// <response code="500">Status 500</response>
        [HttpDelete]
        [Route("/ebusiness/{salesChannelId}/return/{partnerReturnAuthorizationNumber}")]
        [ValidateModelState]
        [SwaggerOperation("SalesChannelIdReturnPartnerReturnAuthorizationNumberDelete")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse2007), description: "Status 200")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Status 400")]
        [SwaggerResponse(statusCode: 500, type: typeof(Error), description: "Status 500")]
        public virtual IActionResult SalesChannelIdReturnPartnerReturnAuthorizationNumberDelete([FromRoute][Required]string salesChannelId, [FromRoute][Required]string partnerReturnAuthorizationNumber, [FromHeader][Required()]string costcoTrackingId, [FromHeader]string costcoEnv)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(InlineResponse2007));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Error));

            string exampleJson = null;
            exampleJson = "{\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<InlineResponse2007>(exampleJson)
            : default(InlineResponse2007);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
